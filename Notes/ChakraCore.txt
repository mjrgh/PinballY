ChakraCore is Microsoft's open-source (MIT License) Javascript engine.
It's incorporated into PinballY as a scripting engine for user
customizations.

Last Updates
============

ChackraCore:
    origin:  https://github.com/Microsoft/ChakraCore.git 
    commit:  e26c81f6eabf3b4c0f45c3963be807d3ea90c63e
    date:    1 August 2024

ChakraCore:
    origin:  https://github.com/mjrgh/ChakraCore-Debugger
    commit:  75cc0b073aad00cf18413bfdff260f191e226e46
    date:    30 August 2024
             (up to date with base https://github.com/microsoft/ChakraCore-Debugger.git commit d0178f83c6c49e2e5980e43be81a0e5c7e36ce6e)


Build Instructions
==================

Embedding ChakraCore into a third-party C++/Win32 application is
straightforward.  You just need the DLL, the import .lib for the DLL,
and a few header files.  The ChakraCore developers even provide a
NuGet package (Microsoft.ChakraCore.vc140) with this set of files, so
in principle the dependencies could be automated via NuGet.  But it's
easy enough to just build ChakraCore from source using Visual Studio,
so I'm just building it manually and copying the required files into
the PinballY project folder.  

The PinballY git repository includes all of the built ChakraCore files
required, so you should be able to build with just what's in the git.
However, you might need to rebuild the included ChakraCore binaries if
(a) you want to update to a newer ChakraCore release, or (b) your
version of Visual C++ can't read my .lib binaries.  It's fortunately
really easy to do this:

1. git clone https://github.com/Microsoft/ChakraCore.git

2. git checkout v1.11.3 [you can substitute the current release version]

3. Open <Path to ChakraCore>/build/Chakra.Core.sln in Visual Studio

4. Build the x86 and x64 versions of the Core/Bin and Core/Lib projects:

   a. Select configuration Release/x64
   b. In the Solution Explorer list, right click Core > Bin, select Build
   c. In the Solution Explorer list, right click Core > Lib, select Build

   d. Select configuration Release/x86
   e. In the Solution Explorer list, right click Core > Bin, select Build
   f. In the Solution Explorer list, right click Core > Lib, select Build

NOTE: As of 8/2024, with Visual Studio 2022, the full Solution rebuild
doesn't complete; I haven't fully investigated why, because the components
that PinballY requires DO build correctly.  The right-click > Build process
above builds only those components.

5. git clone https://github.com/mjrgh/ChakraCore-Debugger

   (That's the fork with my changes.  I've fixed a number of problems
   in the original and added some new functionality.  If you want to
   use the official version instead, well, I'd recommend against it,
   but if you really want to anyway, see "Extra steps..." below.)

6. Open ChakraCore-Debugger/ChakraCore.Debugger.sln in Visual Studio

7. Make sure all three "lib" sub-projects are still selected.  Now, FOR EACH
   configuration in Debug/x86, Debug/x64, Release/x86, Release/x64:

   a. Select the current configuration in the toolbar
   b. Right-click the selected "lib" sub-projects, select Rebuild Selection

8. In a CMD prompt, CD to the PinballY folder and run 
   import-chakra-core.bat "<path to ChakraCore>" "<path to ChakraCore-Debugger>"

This will copy the required dependency files from the ChakraCore
source tree into the PinballY source tree, where they'll be part of
the PinballY git repository.  

This arrangement is good because it means that you don't have to
install the ChakraCore source tree just to build PinballY.  All
dependent files are captured in the PinballY git repos.  The only
drawback is that any time we want to update to a newer release of
ChakraCore, you have to repeat the manual procedure above.  And even
that isn't so terrible, as the build process for ChakraCore is really
simple, as you can see from the steps above.


Migrating ChakraCore-Debugger to a new Visual Studio major version
==================================================================

I'm not sure why ChakraCore-Debugger is set up to require this extra
step, but for some reason they hard-coded the Visual Studio build
tools dependencies in a buried file in the solution folder tree.  You
have to manually update it before it'll build the right version.

- Open ChakraCore-Debugger\PropertySheets\Chakra.Cpp.props

- Find <VCProjectVersion> and change it to match the version code
  for your current Visual Studio:

    Visual Studio 2017 = 15.0
    Visual Studio 2019 = 16.0

- Find <PlatformToolset> and change it to match the version code
  for your toolset.  This is the vNNN number that appears in the
  project properties pages under General > Platform Toolset.
  For example, open the PinballY solution, right-click on the
  PinballY project, and select Properties.  Go to the General
  page.  Look for the Platform Toolset line - it'll say something
  like "Visual Studio 2019 (v142)".  The "v142" part is what you
  enter for <PlatformToolset>.



Extra steps needed for the official ChakraCore-Debugger fork
============================================================

Ignore the following if you're using my forked ChakraCore-Debugger
version, which is what I strongly recommend.

If you really want to use the original, it's possible, but you'll have
to do significant work, and the resulting build will have some
annoying problems when using it with VS Code.

1. The easy part.  Change the project settings to link with the static
C runtime libs; the default link with the DLL crtls, which is
incompatible with PinballY's build settings and thus won't allow the
libs to be linked.  Under the "lib" folder, select all three
sub-projects by shift-clicking, then:

   a. Right-click the selected group, select Properties
   b. Navigate to C/C++ > Code Generation
   c. Select Release > All Platforms in the configuration/platform drop list
   d. In the right pane, set "Runtime Library" to "Multi-threaded (/MT)"
   e. Select Debug > All Platforms in the configuration/platform drop list
   f. In the right pane, set "Runtime Library" to "Multi-threaded Debug (/MTd)"
   g. Click Apply, OK

2. The not-too-hard-but-labor-intensive part.  Compile PinballY.
Review the link errors.  Remove calls to JsDebug... functions that
cause "missing external reference" errors in the link.  These are new
custom API functions that I added to the ChakraCore-Debugger public
API.  They don't exist in the original, so the PinballY dependencies
on them will cause link errors.

3. The hard part.  Replicate all of the development work I did to fix
bugs and add missing functionality to the ChakraCore-Debugger project.
You'll have to thoroughly test to find the issues, and come up with
your own alternative solutions.  You might try to just live with the
problems if you prefer, but I find this code unusable for anything
beyond the most basic demonstration purposes in its original state.

Some of the known issues:

a. Breakpoints on non-executable lines aren't resolved correctly in VS
Code.  Fire up VS Code; launch a PinballY session; stop in the
debugger.  Set a breakpoint on a line of source that doesn't have any
executable code.  The Javascript engine will properly set the BP on
the next executable line.  Now click *again* on the same line to set
another breakpoint there.  VS Code will think it has two breakpoints
on top of each other at this point; clearing either one will crash the
debug session.

b. The "break=none" startup mode won't work.  The CC-D layer doesn't
have a way to let PinballY resume execution after the initial break.

c. The base version doesn't implement interactive expression
evaluation (from the debug UI console).

d. The base version doesn't implement console.log().

e. The base version can't handle debugging into "import" modules, due
to some brittle expectations about the stack frame that change when
stopped in a module.

f. There are a bunch of other small, miscellaneous bug fixes and
additions in my fork for cases that weren't handled properly in the
base version.  Some of these are outright bugs and some are just
missing basic functionality.  


On a more general note:

CC-D has a basic design flaw (in my opinion) in how it handles errors.
Specifically, it tends to throw a fatal error on encountering anything
unexpected or unimplemented (and in its current prototype-level stage
of development, there's *a lot* that's unimplemented).  This makes it
tend to terminate abruptly - killing any running Javascript script,
and disconnecting from the debugger UI client - when anything goes
wrong.  It doesn't usually generate any useful diagnostics in these
cases, either; it just throws an error up to the main CC layer, which
CC in turn bubbles up to the main application as a JsErrorFatal, with
no further information attached.  Not a robust design.

It would probably be possible to fix this in some kind of general way
so that fatals are never thrown out of the debug layer.  There might
be *some* situations where throwing a fatal is actually called for,
but the situations I've encountered so far definitely do not fit that
description.  They're mostly simple validation errors that are easily
recoverable - just report what's wrong to the user (when that would be
useful information), abort the command (or whatever) that caused the
error, and return to normal processing.  But the current (lack of)
error handling is basically baked into the design and used
ubiquitously throughout the code, so it might take some significant
work to change.  In the meantime, this is why I've been trying to
flesh out the implementation to cover common situations more
thoroughly, so that ordinary debug events are less likely to trigger
internal CC-D layer errors in the first place.



"T" string vs Unicode string types
==================================

I play a little fast and loose with Unicode vs the "T" string types.
Most of PinballY uses Microsoft's "T" types (TCHAR, LPTSTR, etc),
which are basically macros that can turn into 8-bit OR Unicode
strings, depending on whether you're building in ANSI or Unicode mode.
But ChakraCore never uses these types; it's explicit in every API
about using either UTF-16 or UTF-8, and has no build-time conditional
character types.

I really only use the "T" types in PinballY out of habit.
Realistically, PinballY is a Unicode app and I'm never going to build
it as an ANSI app.  The "T" types are an old habit that I really
should drop; Windows has fully embraced Unicode and isn't looking
back, and neither should we app developers.  As a result, I haven't
been completely thorough about type run-time string conversions
between "T" and "W" strings at the Chakra Core interfaces.  I'm pretty
much treating the two as equivalent.  If you try to compile PinballY
in 8-bit mode, you're going to run into some (probably lots of)
mismatches.  Easy solution: don't do that; just build it in Unicode.

If you really need to built in 8-bit mode for some unfathomable
reason, you'll have to fix all of those mismatches.  Check out
Utilities/StringUtil.h for a fairly complete and easy to use set of
cover macros to do the conversions where necessary.  The nice thing
about the cover macros is that they'll have zero cost when compiling
in Unicode mode, if you pick the right macros, because the Unicode
versions all compile down to nothing.  (If the macros you're using
AREN'T zero cost in Unicode mode, you're using the wrong ones: keep
looking.)  If you do this work and get it built and working in 8-bit
mode, and you don't break anything or add any runtime cost in Unicode
mode (because you picked the right macros!), send a pull request on
github and I'll be happy to merge your changes so that it keeps
working in 8-bit mode going forward.  But I mention this only for the
sake of completeness, because I can't imagine any reason anyone would
ever want to build PinballY in 8-bit ANSI mode in the first place, let
alone do the work to make it happen.
