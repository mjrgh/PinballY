Build Environment Setup

1. Visual Studio version

As of this writing, I'm building with Visual Studio 2019, version
16.11.2.  Other nearby VS2019 versions will probably also work.  Minor
edits to the C++ code are sometimes required when migrating to a new
Visual Studio version because of compiler changes, but this is more
likely when moving to a new VS major version (e.g., migrating from
VS2017 to VS2019) than between dot releases.  If you encounter any
build errors (after following the instructions below to set up
required tools and libraries), you might try the same VS version I'm
using.  You shouldn't have to delete your current VS installation to
do this; VS easily accommodates multiple major versions coexisting on
the same system.


2. DirectX SDK June 2010

You also have to separately the legacy "DirectX Software Development
Kit (June 2010)", which you can currently find here:

  https://www.microsoft.com/en-us/download/details.aspx?id=6812

After installing the June 2010 DX SDK, you MUST set the following
global environment variable to its install directory:

  set DXSDK_DIR=C:\DXSDK\

The variable MUST include the trailing backslash.  To set this:

  - Go to the System Properties (aka Advanced System Settings) control panel
  - click Environment Variables
  - In the top half of the dialog ("User variables for <user>"), click New
  - Enter DXSDK_DIR as the new variable name, and enter the path with 
    trailing backslash

Why do you have to install the old SDK?  If you're familiar with the
modern DirectX technologies, you're aware that there's no longer a
separate DirectX SDK; all DirectX features are now part of the main
Windows SDK.  Unfortunately, this integration comes at a cost: Windows
7 is no longer fully supported in the modern DirectX technologies.  I
want to support Windows 7 for now, though, which means that we can't
use all of the latest DX technologies.  In particular, we can't use
the current audio API, XAudio2.9, since it only works on Windows 10.
We can't even use the previous version, XAudio2.8, since that only
works on Windows 8 and later.  We have to go back to XAudio2.7 for
Windows 7 support.  And XAudio2.7 isn't supported at all in the
current Windows SDK.  To compile for XAudio2.7, we have to use that
creaky old June 2010 SDK, which has to be installed separately.

XAudio2.7 is the only legacy technology we depend upon, so as soon as
we're ready to abandon Windows 7 users, we can get rid of the old
DXSDK and go entirely with the modern Windows SDK.


3.  WiX Toolset

To build the MSI installer, you'll also need to install the free WiX
Toolset, version 3.11.  You can find that here:

  http://wixtoolset.org/

Install both of the following:

  - WiX Toolset 3.11
  - WiX Toolset Visual Studio 2017 Extension

Installing WiX is optional, as you can build the rest of the system
without building the MSI installer.  Just build the "PinballY Admin
Mode" project individually.  That will build the main PinballY project
and all of its subprojects as dependencies.


4. Chakra Core

This project uses Chakra Core, the Microsoft Javascript engine.  The
necessary headers and pre-built binaries of the .lib and .dll files
are included in the git repository, so you don't have to build Chakra
Core itself to build PinballY.  However, if you wish to update to a
newer Chakra Core, or you want the source around for debugging, you
can build it from source, which is quite simple to do.  Instructions
are in Notes\ChakraCore.txt.


5. Install other needed Windows Platform SDK versions (if necessary)

Visual Studio normally installs the current Windows Platform SDK
automatically as part of the development environment setup.  However,
each Project configuration calls for a SPECIFIC Platform SDK version,
so the one that VS installs might not match what the PinballY project
settings require.  All past SDK releases can be found here:

  https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/

Find the version number you need, and download and run the
corresponding SDK installer.

It's okay to have several different SDK versions installed on your
machine, so installing another version won't affect your existing SDK
installs or other projects.

How do you tell which version(s) to install?  Newer versions of the
compiler generate helpful diagnostics telling you just what you need -
look for messages in the Output window along the lines of "Windows SDK
version <xxxxx> is required".  If you find any of those, just go to
the SDK archive link above and download and install the exact versions
mentioned.  Remember, there might be more than one version needed.

If you don't see such specific error messages, but you think you're
missing an SDK because of missing .h file errors, you can determine
the SDK dependencies by looking at the project properties pages in
Visual Studio.  Open the solution (.sln) file in Visual Studio, then
right-click on the project in the Solution Explorer panel and select
Properties.  On the "General" page, look for the line saying "Windows
SDK Version".  That will tell you the specific version that project
requires.

As an alternative to installing old SDKs, you can try changing the
project settings to a newer SDK version (presumably a version that's
already installed on your machine).  That will usually work, because
Microsoft tries pretty hard to make each SDK versions backwards
compatible with existing code written against older SDKs.  But they
don't always manage that, and it seems like they've gotten more
cavalier about breaking changes as time goes on.  So switching to a
newer SDK version will sometimes create new compiler errors - and in
some cases, the program might build successfully but break at
run-time, especially if you run it on an older Windows version.  The
safest, least destabilizing thing to do is always to compile against
the same SDK version listed in the project, since you can have some
assurance that the program has been successfully built and tested
against that version by someone else already.  If you do change any of
the projects to newer SDK, you should do a little more testing than
you might otherwise do to make sure that there aren't any hidden
compatibility issues.
